# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ij6DZ45GiSrivjwREeduMOneTv9BJQtq

**Python Task 1:**

Question 1: Car Matrix Generation
Under the function named generate_car_matrix write a logic that takes the dataset-1.csv as a DataFrame. Return a new DataFrame that follows the following rules:

values from id_2 as columns
values from id_1 as index
dataframe should have values from car column
diagonal values should be 0.
"""

import random

def generate_car_matrix(num_cars):
# Define car attributes
attributes = ["Make", "Model", "Year", "Color"]

# Generate matrix header
matrix = [attributes]

# Generate random data for the matrix
for _ in range(num_cars):
    car_data = [random.choice(["Toyota", "Honda", "Ford", "Chevrolet"]),
                f"Model_{random.randint(1, 10)}",
                random.randint(2000, 2023),
                random.choice(["Red", "Blue", "Green", "Black", "White"])]
    matrix.append(car_data)

return matrix
def print_matrix(matrix):
for row in matrix:
print("|".join(str(cell).ljust(12) for cell in row))

car_matrix=df.pivot(index='id_1', columns='id_2', values='car').fillna(0)
car_matrix.values[[range(car_matrix.shape[0])]*2]=0
return car_matrix

"""Question 2: Car Type Count Calculation
Create a Python function named get_type_count that takes the dataset-1.csv as a DataFrame. Add a new categorical column car_type based on values of the column car:

low for values less than or equal to 15,
medium for values greater than 15 and less than or equal to 25,
high for values greater than 25.
Calculate the count of occurrences for each car_type category and return the result as a dictionary. Sort the dictionary alphabetically based on keys.
"""

def categorize_car(val):
if val <= 15:
return 'low'
elif val <= 25:
return 'medium'
else:
return 'high'

 df['car_type'] = df['car'].apply(categorize_car)

type_count = df['car_type'].value_counts().to_dict()

type_count = dict(sorted(type_count.items()))

return type_count

"""Question 3: Bus Count Index Retrieval
Create a Python function named get_bus_indexes that takes the dataset-1.csv as a DataFrame. The function should identify and return the indices as a list (sorted in ascending order) where the bus values are greater than twice the mean value of the bus column in the DataFrame.
"""

import pandas as pd

def get_bus_indexes(dataframe):
# Calculate the mean value of the "bus" column
bus_mean = dataframe['bus'].mean()

# Identify indices where "bus" values are greater than twice the mean
bus_indexes = dataframe[dataframe['bus'] > 2 * bus_mean].index.tolist()

# Sort the indices in ascending order
bus_indexes.sort()

return bus_indexes
result = get_bus_indexes(dataset)
print(result)

"""Question 4: Route Filtering
Create a python function filter_routes that takes the dataset-1.csv as a DataFrame. The function should return the sorted list of values of column route for which the average of values of truck column is greater than 7.
"""

import pandas as pd

def filter_routes(dataframe):
# Calculate the average value of the "truck" column for each route
route_avg_truck = dataframe.groupby('route')['truck'].mean()

# Filter routes where the average value of the "truck" column is greater than 7
filtered_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

return filtered_routes
result = filter_routes(dataset)
print(result)

"""Question 5: Matrix Value Modification
Create a Python function named multiply_matrix that takes the resulting DataFrame from Question 1, as input and modifies each value according to the following logic:

If a value in the DataFrame is greater than 20, multiply those values by 0.75,
If a value is 20 or less, multiply those values by 1.25.
The function should return the modified DataFrame which has values rounded to 1 decimal place.
"""

import pandas as pd

def multiply_matrix(input_dataframe):
# Create a copy of the input DataFrame to avoid modifying the original data
modified_dataframe = input_dataframe.copy()

# Apply the specified logic to modify values in the DataFrame
modified_dataframe = modified_dataframe.applymap(
    lambda x: x * 0.75 if x > 20 else x * 1.25
)

# Round the values to 1 decimal place
modified_dataframe = modified_dataframe.round(1)

return modified_dataframe
result = multiply_matrix(resulting_dataframe)
print(result)

"""Question 6: Time Check
You are given a dataset, dataset-2.csv, containing columns id, id_2, and timestamp (startDay, startTime, endDay, endTime). The goal is to verify the completeness of the time data by checking whether the timestamps for each unique (id, id_2) pair cover a full 24-hour period (from 12:00:00 AM to 11:59:59 PM) and span all 7 days of the week (from Monday to Sunday).

Create a function that accepts dataset-2.csv as a DataFrame and returns a boolean series that indicates if each (id, id_2) pair has incorrect timestamps. The boolean series must have multi-index (id, id_2).
"""

import pandas as pd

def check_time_completeness(dataframe):
# Combine date and time columns to create datetime objects
dataframe['start_datetime'] = pd.to_datetime(dataframe['startDay'] + ' ' + dataframe['startTime'])
dataframe['end_datetime'] = pd.to_datetime(dataframe['endDay'] + ' ' + dataframe['endTime'])

# Check if the time range for each ("id", "id_2") pair covers a full 24-hour period and spans all 7 days
completeness_series = dataframe.groupby(['id', 'id_2']).apply(lambda group: check_time_range(group)).droplevel(2)

return completeness_series
def check_time_range(group):
# Check if the time range covers a full 24-hour period and spans all 7 days
start_time = group['start_datetime'].min().time()
end_time = group['end_datetime'].max().time()

return (end_time > start_time) and (group['start_datetime'].dt.dayofweek.nunique() == 7)
result = check_time_completeness(dataset_2)
print(result)

import pandas as pd

def filter_rows_by_time_condition(df):
df['timestamp'] = pd.to_datetime(df['timestamp'])
time_duration = df.groupby(['id', 'id_2'])['timestamp'].agg(lambda x: x.max() - x.min())
time_check_list = (time_duration >= pd.Timedelta(days=7) - pd.Timedelta(hours=24))
filtered_df = df[df.set_index(['id', 'id_2']).index.isin(time_check_list[time_check_list].index)]
return filtered_df

#Example usage:
#filtered_df = filter_rows_by_time_condition(df)